---
name: "Covtracer action"

description: "Github Actions to implement R development stages for package development"
inputs:
  path:
    description: Path to package's root
    required: false
    default: "."
  allow-failure:
    description: CovtracerCheck errors will not fail, but will give a warning.
    required: false
    type: boolean
    default: false
  ignored-file-types:
    description: CovtracerCheck can ignore none code file types.
    required: false
    default: "data,class"
  minimal-coverage:
    description: "Minimal coverage"
    required: false
    default: 80
  post-result-as-comment:
    description: "post the check result as a PR comment"
    required: false
    default: true
  no-cache:
    description: "disable github action R dependency caching"
    required: false
    default: false
branding:
  icon: "arrow-right"
  color: "blue"
runs:
  using: "composite"
  steps:
    - name: Get R version
      id: r_version
      run: echo "::set-output name=R_VERSION::$(R --version | head -1 | awk '{print $3}')"
      shell: bash

    - name: Set R Library home on Linux
      run: |
        mkdir -p /__w/_temp/Library
        echo ".libPaths(c('/__w/_temp/Library', .libPaths()))" > ~/.Rprofile
      shell: bash

    - name: Cache R packages
      if: "contains(inputs.no-cache, 'false')"
      uses: actions/cache@v2
      with:
        path: /home/runner/work/_temp/Library
        key: ${{ inputs.cache-version }}-${{ runner.os }}-${{ steps.r_version.outputs.R_VERSION }}-${{ hashFiles('.github/depends.Rds') }}
        restore-keys: ${{ inputs.cache-version }}-${{ runner.os }}-${{ steps.r_version.outputs.R_VERSION }}

    - name: Install dependencies
      run: |
        options(repos = c(CRAN = "https://cloud.r-project.org/"))
        ncores <- parallel::detectCores(all.tests = FALSE, logical = TRUE)
        if (!require("remotes")) {
          install.packages("remotes",
            dependencies = TRUE, upgrade = "never", Ncpus = ncores)
        }
        if (!require("covtracer")) {
          remotes::install_github("Genentech/covtracer",
            dependencies = TRUE, upgrade = "never", Ncpus = ncores,
            auth_token=Sys.getenv("GITHUB_TOKEN")
          )
        }
        if (!require("optparse")) {
          install.packages("optparse",
            dependencies = TRUE, upgrade = "never", Ncpus = ncores)
        }
        if (!require("covr")) {
          install.packages("covr",
            dependencies = TRUE, upgrade = "never", Ncpus = ncores)
        }
      shell: Rscript {0}

    - name: Prepare script options
      run: |
        declare -a options
        test "${{ inputs.build-output-file }}x" = "x" || options+=(--build-output-file ${{ inputs.build-output-file }})
        test "${{ inputs.quit-with-status }}" = "true" && options+=(--quit-with-status)
        echo "COVTRACER_OPTIONS=${options[@]}" >> $GITHUB_ENV
      shell: bash

    - name: Run CovtracerCheck
      run: |
        echo -e "Running: ${GITHUB_ACTION_PATH}/CovtracerCheck.R ${COVTRACER_OPTIONS} ${{ inputs.path }}\n\n"
        ${GITHUB_ACTION_PATH}/CovtracerCheck.R ${COVTRACER_OPTIONS} ${{ inputs.path }} 2>&1 | \
          tee covtracer_result.txt || echo "" > .covtracer_fail
      shell: bash

    - name: Format output
      if: inputs.post-result-as-comment
      run: |
        ls -al .
        echo " ------ covtracer_result ------"
        [ -f covtracer_result.txt ] && cat covtracer_result.txt
        echo "------------------ end covtracer_result---------------------------------------"
        echo "----------------- covtracer_fail -------------------------------"
        [ -f .covtracer_fail ] && cat .covtracer_fail
        echo "------------------ end covtracer_fail ---------------------------------------"
        echo "**CovtracerCheck results:**\n\n" > covtracer_result_formatted.txt 
        if [ -f ".covtracer_traceability_matrix.txt" ]; then
          echo -e "\n**Traceability Matrix:**\n" >> covtracer_result_formatted.txt
          sed 's/.*/|&|/g' .covtracer_traceability_matrix.txt | sed '2 i | --- | --- | --- |' >> covtracer_result_formatted.txt
          echo -e "\n" >> covtracer_result_formatted.txt
        fi
        if [ -f ".covtracer_directly_tested.txt" ]; then
          echo -e "\n**Directly tested:**\n" >> covtracer_result_formatted.txt
          sed 's/.*/|&|/g' .covtracer_directly_tested.txt | sed '2 i | --- | --- | --- |'>> covtracer_result_formatted.txt
          echo -e "\n" >> covtracer_result_formatted.txt
        fi
        if [ -f ".covtracer_untested_behaviour.txt" ]; then
          echo -e "\n**Untested:**\n" >> covtracer_result_formatted.txt
          sed 's/.*/|&|/g' .covtracer_untested_behaviour.txt | sed '2 i | --- | --- | --- | --- | ---- |' >> covtracer_result_formatted.txt
          echo -e "\n" >> covtracer_result_formatted.txt
        fi
        if [ -f ".covtracer_coverage_result.txt" ]; then
          echo -e "\n**Coverage test summary:**\n" >> covtracer_result_formatted.txt
          sed 's/.*/|&|/g' .covtracer_coverage_result.txt | sed '2 i | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- | --- |' >> covtracer_result_formatted.txt
          echo -e "\n" >> covtracer_result_formatted.txt
        fi
#        test -f ".covtracer_fail" && (echo -e "### CovtracerCheck FAILED.\n" > covtracer_result_formatted.txt) || \
#          (echo -e "### CovtracerCheck PASSED.\n" > covtracer_result_formatted.txt)
#        head -2 covtracer_result.txt >> covtracer_result_formatted.txt
#        echo -e "\n<details>\n  <summary>Click here to show log</summary>\n" >> covtracer_result_formatted.txt
#        echo '```'  >> covtracer_result_formatted.txt
#        sed -n '/.*Installing package...$/, /^Summary:$/p' covtracer_result.txt | tail -n +2 |grep -v "^Summary:$" >> covtracer_result_formatted.txt
#        echo '```'  >> covtracer_result_formatted.txt
#        echo "</details>" >> covtracer_result_formatted.txt
#        echo  -e "\n### Summary:\n" >> covtracer_result_formatted.txt
#        echo '```'  >> covtracer_result_formatted.txt
#        grep -A 3 "^Summary:$" covtracer_result.txt | grep -v Summary >> covtracer_result_formatted.txt
#        echo '```' >> covtracer_result_formatted.txt
#        grep -v "CovtracerCheck FAILED" covtracer_result.txt | tail -3 >> covtracer_result_formatted.txt
      shell: bash

    - uses: marocchino/sticky-pull-request-comment@v2
      if: inputs.post-result-as-comment
      with:
        header: CovtracerCheck
        path: covtracer_result_formatted.txt

    - name: Check covtracer status
      run: |
        if [[ -f ".covtracer_fail"  &&  "${{ inputs.allow-failure }}" == "false" ]]; then
          echo "‚ùå CovtracerCheck has errors"
          exit 1
        elif  [[ -f ".covtracer_fail" ]]; then
            echo "‚ö†Ô∏è CovtracerCheck produced WARNINGs"
        else
          echo "üíö CovtracerCheck status OK"
        fi
      shell: bash
